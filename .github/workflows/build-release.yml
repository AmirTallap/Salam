name: Build and Release Salam

on:
  push:
    branches:
      - main

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get install build-essential

      - name: Build salam for Linux
        run: |
          cd src
          make run
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: salam-linux
          path: src/salam

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build salam for macOS
        run: |
          cd src
          make run

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: salam-macos
          path: src/salam

  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: "GCC Version"
        run: |
          gcc --version

      # - name: Cache Chocolatey packages
      #   id: chocolatey-cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       C:\Users\runneradmin\AppData\Local\Temp\chocolatey
      #     key: ${{ runner.os }}-windows-chocolatey
      #     restore-keys: |
      #       ${{ runner.os }}-windows-chocolatey
        
      # - name: Set up GCC
      #   uses: egor-tensin/setup-mingw@v2
      #   with:
      #     platform: x64

      # - name: Set up MSVC compiler
      #   if: steps.chocolatey-cache.outputs.cache-hit != 'true'
      #   run: |
      #     choco sync
      #     choco upgrade all -y
      #     choco install visualstudio2017buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools"
      #   shell: cmd
  
      - name: Build salam.exe for Windows
        run: |
          cd src
          build-windows.bat
        shell: cmd
  
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: salam-windows
          path: src/salam.exe
  
  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        id: get_version
        run: |
          VERSION=$(cat VERSION | sed 's/^[ \t]*//;s/[ \t]*$//')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: salam-linux
          path: ./release

      - name: Rename Linux binary to avoid conflict
        run: |
          mv ./release/salam ./release/salam-linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: salam-macos
          path: ./release

      - name: Rename macOS binary to avoid conflict
        run: |
          mv ./release/salam ./release/salam-mac

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: salam-windows
          path: ./release

      - name: List of release files
        run: |
          ls -al
          ls -al release/

      - name: Post Linux release file to SERVER_VERSIONS_API
        run: |
          curl -X POST "${{ secrets.SERVER_VERSIONS_API }}" \
            -F "file=@./release/salam-linux" \
            -F "version=${{ env.VERSION }}" \
            -F "date=$(date +'%Y-%m-%d')" \
            -F "time=$(date +'%H:%M:%S')" \
            -F "key=${{ secrets.SERVER_VERSIONS_KEY }}" \
            -F "platform=linux"

      - name: Post macOS release file to SERVER_VERSIONS_API
        run: |
          curl -X POST "${{ secrets.SERVER_VERSIONS_API }}" \
            -F "file=@./release/salam-mac" \
            -F "version=${{ env.VERSION }}" \
            -F "date=$(date +'%Y-%m-%d')" \
            -F "time=$(date +'%H:%M:%S')" \
            -F "key=${{ secrets.SERVER_VERSIONS_KEY }}" \
            -F "platform=macos"

      - name: Post Windows release file to SERVER_VERSIONS_API
        run: |
          curl -X POST "${{ secrets.SERVER_VERSIONS_API }}" \
            -F "file=@./release/salam-windows" \
            -F "version=${{ env.VERSION }}" \
            -F "date=$(date +'%Y-%m-%d')" \
            -F "time=$(date +'%H:%M:%S')" \
            -F "key=${{ secrets.SERVER_VERSIONS_KEY }}" \
            -F "platform=windows"

      - name: Create tag
        id: create_tag
        run: |
          tag_name="v1.0.${{ github.run_number }}"
          git tag $tag_name
          git push origin $tag_name

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          files: |
            release/salam-linux
            release/salam-mac
            release/salam-windows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
